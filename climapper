#!/usr/bin/env python3
# coding: utf-8
import os
import sys
import json
import math
import requests
import unidecode

__author__ = "Theo Massard <massar_t@etna-alternance.net"


BASE_URL = "https://citymapper.com/"
ENDPOINT = "api/7/journeys?start=FROM&end=TO&region_id=fr-paris"

NO_INTERNET = True
IGNORE_DATE = True

def f_minutes(seconds: int) -> int:
    """Simply formats time(int) to minutes, rounding to ceil

    :param seconds The value to format in seconds

    :type seconds int

    :returns: The value of seconds formatted in seconds
    :rtype int

    """
    val = math.ceil(seconds / 60)
    return val


def get_params():
    """
    Collects and returns the environment variables as
    `lon%Clat` after formatting them.
    TODO Allow configuration to collect dynamically

    :returns: tuple of string containing the formatted destination
    :rtype str, str

    """
    home = os.environ.get("MY_HOME", False)
    work = os.environ.get("WORK", False)

    if not home or not work:
        print("Missing informations about the destinations.", file=sys.stderr)
        sys.exit(1)

    if False:
        source = home
        dest = work
    else:
        source = work
        dest = home

    tr_source = source.replace(',', "%2C")
    tr_dest = dest.replace(',', "%2C")
    return tr_source, tr_dest


def make_url(source: str, destination: str) -> str:
    """Returns the formatted url for the request

    :param source The `from` location of the journey
    :param destination The `to` location of the journey (actual destination)

    :type source str
    :type destination str

    :return: the formatted URL to use for the request to the Citymapper API
    :rtype str

    """
    unformatted_url = BASE_URL + ENDPOINT
    formatted = unformatted_url.replace(
            "FROM", source).replace("TO", destination)
    return formatted


def make_request(url: str) -> str:
    """
    Requests the content of the formatted url
    and returns the content of the page

    :param url The url with the `GET` parameters embedded in

    :type url str

    :returns: content of the url request
    :rtype str

    """
    response = requests.get(url)
    content = response.content
    return unidecode.unidecode(content.decode('utf-8'))

def manage_duration(journey: dict):
    """Formats the transit and walking durations of the journey

    :param journey The result of the API request containing journey infos.

    :type journey dict

    :returns: TODO

    """
    return

def content_to_obj(content: str) -> dict :
    """Transforms the url's content to JSON object

    :param content The content of the page

    :type content str

    :returns: a JSON object containing the journeys
    :rtype JSON

    """
    obj = json.loads(content)
    return obj


def dt_to_s(s_time: str) -> str:
    """TODO: Simple function parsing a basic timestamp

    :param s_time The string to parse

    :type s_time str

    :returns: tuple of reformatted strings, as date and hour
    :rtype str, str

    """
    try:  # Of course I hard coded these value. -> no need to import datetime
        year = s_time[:4]
        month = s_time[5:7]
        day = s_time[8:10]
        hour = s_time[11:13]
        minute = s_time[14:16]
        seconds = s_time[17:19]
        date = "%s/%s/%s" % (year, month, day)
        date_hours = "%s:%s:%s" % (hour, minute, seconds) 
        return date, date_hours
    except IndexError:
        return s_time, None

def manage_durations(journey: dict, journey_info: dict) -> None:
    """
    Extracts informations from journey dict about the durations.
    Adds them to journey_info dict

    :journey: Original JSON
    :journey_info: Collector dictionnary

    :returns: None

    """
    journey_info['journey_duration'] = f_minutes(journey.get('duration_seconds'))
    journey_info['walk_duration'] = f_minutes(journey.get('walk_seconds'))


def manage_date(ele: dict, step: dict) -> None:
    """Extracts date from current element and adds it to step dict

    :element: JSON from original JSON
    :step: Collector dictionnary
    :returns: None

    """
    s_date, s_hour = dt_to_s(ele.get('departure_time'))
    e_date, e_hour = dt_to_s(ele.get('arrival_time'))
    step['start_hour'] = s_hour
    step['end_hour'] = e_hour
    if not IGNORE_DATE:
        step['end_date'] = e_date
        step['start_date'] = s_date


def get_journey_info(journey: dict) -> dict:
    """Formats the JSON for easy display

    :param leg A dictionnary containing the leg's informations

    :type leg dict

    :returns: Another object, easier to display, about the leg
    :rtype dict

    """
    journey_info = dict()
    steps = []
    legs = journey.get('legs')
    manage_durations(journey, journey_info)

    for ele in legs:
        print(ele.keys())
        for e, v in ele.items():
            print(e, ": ", v)
        print()
        step = dict()
        mode = ele['mode']
        step['mode'] = mode
        if mode == 'transit':
            try:
                step['transp_name'] = ele['routes'][0]['display_name']
            except IndexError:
                step['transp_name'] = 'UKNOWN'
        manage_date(ele, step)
        step['distance'] = ele.get('distance_meters', '')
        if ele.get('stops'):
            step['transit_src'] = ele['stops'][0].get('name')
            step['transit_dest'] = ele['stops'][-1].get('name')
        steps.append(step)

    print("Journey Infos:", journey_info)
    for s in steps:
        print(s)
    sys.exit()


def main():
    src, dst = get_params()
    url = make_url(src, dst)
    print("Requesting url: " + url)
    if not NO_INTERNET:
        content = make_request(url)
    else:
        with open('req.json', 'r') as var:
            content = var.readlines()[0]
    print(len(content))
    #print(content)
    ob = content_to_obj(content)
    for nbr, journey in enumerate(ob['journeys']):
        if nbr != 1:
            continue
        sys.stdout.write("Journey #%i " % nbr)
        get_journey_info(journey)


if __name__ == "__main__":
    main()
