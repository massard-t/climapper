#!/usr/bin/env python3
# coding: utf-8
import os
import sys
import json
import math
import requests
import unidecode


__author__ = "Theo Massard <massar_t@etna-alternance.net"


BASE_URL = "https://citymapper.com/"
ENDPOINT = "api/7/journeys?start=FROM&end=TO&region_id=fr-paris"


def f_minutes(seconds: int) -> int:
    """Simply formats time(int) to minutes, rounding to ceil

    :param seconds The value to format in seconds

    :type seconds int

    :returns: The value of seconds formatted in seconds
    :rtype int

    """
    val = math.ceil(seconds / 60)
    return val


def get_params():
    """
    Collects and returns the environment variables as
    `lon%Clat` after formatting them.
    TODO Allow configuration to collect dynamically

    :return: tuple of string containing the formatted destination
    :rtype str, str

    """
    home = os.environ.get("MY_HOME", False)
    work = os.environ.get("WORK", False)

    if not home or not work:
        print("Missing informations about the destinations.", file=sys.stderr)
        sys.exit(1)

    if False:
        source = home
        dest = work
    else:
        source = work
        dest = home

    tr_source = source.replace(',', "%2C")
    tr_dest = dest.replace(',', "%2C")
    return tr_source, tr_dest


def make_url(source: str, destination: str) -> str:
    """Returns the formatted url for the request

    :param source The `from` location of the journey
    :param destination The `to` location of the journey (actual destination)

    :type source str
    :type destination str

    :return: the formatted URL to use for the request to the Citymapper API
    :rtype str

    """
    unformatted_url = BASE_URL + ENDPOINT
    formatted = unformatted_url.replace(
            "FROM", source).replace("TO", destination)
    return formatted


def make_request(url: str) -> str:
    """
    Requests the content of the formatted url
    and returns the content of the page

    :param url The url with the `GET` parameters embedded in

    :type url str

    :returns: content of the url request
    :rtype str

    """
    response = requests.get(url)
    content = response.content
    return unidecode.unidecode(content.decode('utf-8'))


def content_to_obj(content: str) -> dict :
    """Transforms the url's content to JSON object

    :param content The content of the page

    :type content str

    :returns: a JSON object containing the journeys
    :rtype JSON

    """
    obj = json.loads(content)
    return obj


def get_journey_info(leg: dict) -> dict:
    """TODO: Docstring for get_journey_info.

    :param leg A dictionnary containing the leg's informations

    :type leg dict

    :returns: Another object, easier to display, about the leg
    :rtype dict

    """
    journey_info = dict()
    journey_info['journey_duration'] = f_minutes(leg['duration_seconds'])
    journey_info['walk_duration'] = f_minutes(leg['walk_seconds'])
    #for key, value in leg.items():
    #    print(key,":", value)

    #print(leg.keys())
    print(journey_info)


def main():
    src, dst = get_params()
    #print("test")
    url = make_url(src, dst)
    print("Requesting url: " + url)
    content = make_request(url)
    #print(content)
    ob = content_to_obj(content)
    for nbr, journey in enumerate(ob['journeys']):
        sys.stdout.write("Journey #" + str(nbr))
        get_journey_info(journey)


if __name__ == "__main__":
    main()
