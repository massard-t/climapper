#!/usr/bin/env python3
# coding: utf-8
import os
import sys
import argparse
from climapper_utils.formatting import f_minutes, make_url, dt_to_s
from climapper_utils.formatting import content_to_obj
from climapper_utils.journey import make_request

__author__ = "Theo Massard <massar_t@etna-alternance.net"


NO_INTERNET = True
IGNORE_DATE = True


def create_parser():
    """Create the parser object to use later.
    also parses the argument (TBD later)

    :returns: object

    """
    parser = argparse.ArgumentParser()
    add_arg = parser.add_argument
    add_arg(
            '--no-internet', type=bool,
            # description="Set to True if working without Internet.",
            default=False,
            help="Shouldn't be set to True if you're a user."
            )
    add_arg(
            '--ignore-date', type=bool,
            # description="Set to True if you don't care about the date",
            default=True,
            help="Currently pointless to set to False"
            )
    parser.parse_args()
    return parser


def get_params(home_var=None, work_var=None):
    """
    Collects and returns the environment variables as
    `lon%Clat` after formatting them.
    TODO Allow configuration to collect dynamically

    :returns: tuple of string containing the formatted destination
    :rtype str, str

    """
    if not home_var:
        home_var = "MY_HOME"
    if not work_var:
        work_var = "WORK"
    home = os.environ.get(home_var)
    work = os.environ.get(work_var)

    if not home or not work:
        print("Missing informations about the destinations.")
        sys.exit(1)

    if False:
        source = home
        dest = work
    else:
        source = work
        dest = home

    tr_source = source.replace(',', "%2C")
    tr_dest = dest.replace(',', "%2C")
    return tr_source, tr_dest


def manage_durations(journey, journey_info):
    """
    Extracts informations from journey dict about the durations.
    Adds them to journey_info dict

    :journey: Original JSON
    :journey_info: Collector dictionnary

    :returns: None

    """
    journey_info['journey_duration'] = f_minutes(journey.get(
        'duration_seconds')
        )
    journey_info['walk_duration'] = f_minutes(journey.get('walk_seconds'))


def manage_date(ele, step):
    """Extracts date from current element and adds it to step dict

    :element: JSON from original JSON
    :step: Collector dictionnary
    :returns: None

    """
    s_date, s_hour = dt_to_s(ele.get('departure_time'))
    e_date, e_hour = dt_to_s(ele.get('arrival_time'))
    step['start_hour'] = s_hour
    step['end_hour'] = e_hour
    if not IGNORE_DATE:
        step['end_date'] = e_date
        step['start_date'] = s_date


def manage_distance(ele, step):
    """TODO: Docstring for manage_distance.

    :journey: dict: TODO
    :step: dict: TODO
    :returns: TODO

    """
    step['distance'] = ele.get('distance_meters')


def get_journey_info(journey):
    """Formats the JSON for easy display

    :param leg A dictionnary containing the leg's informations

    :type leg dict

    :returns: Another object, easier to display, about the leg
    :rtype dict

    """
    journey_info = dict()
    steps = []
    legs = journey.get('legs')
    manage_durations(journey, journey_info)

    for ele in legs:
        step = dict()
        mode = ele['mode']
        step['mode'] = mode
        if mode == 'transit':
            try:
                step['transp_name'] = ele['routes'][0]['display_name']
            except IndexError:
                step['transp_name'] = 'UKNOWN'
        manage_date(ele, step)
        manage_distance(ele, step)
        if ele.get('stops'):
            step['transit_src'] = ele['stops'][0].get('name')
            step['transit_dest'] = ele['stops'][-1].get('name')
        steps.append(step)

    return steps


def display_journey(steps):
    """Pretty displays the steps of a journey

    :steps: list: TODO
    :returns: TODO

    """
    for idx, item in enumerate(steps):
        mode = item.get("mode")
        sys.stdout.write("%s : %s - %s" % (
            mode,
            item.get("start_hour"),
            item.get("end_hour"),
            )
        )
        if mode == "walk":
            distance = item.get("distance")
            if distance:
                print(" - %i meters" % item.get("distance"))
            else:
                print(" - Walking in station")
        elif mode == "transit":
            print("\n%s - %s > %s" % (
                item.get("transp_name"),
                item.get("transit_src"),
                item.get("transit_dest")
                )
            )
        print()


def main(debug=True, start=None, dest=None):
    src, dst = get_params()
    url = make_url(src, dst)
    if debug:
        print("Requesting url: " + url)
    if not NO_INTERNET:
        content = make_request(url)
    else:  # Debug mode
        with open('req.json', 'r') as var:
            content = var.readlines()[0]
    ob = content_to_obj(content)
    for nbr, journey in enumerate(ob['journeys']):
        if nbr != 1:
            continue
        print("Journey #%i " % nbr)
        steps = get_journey_info(journey)
        display_journey(steps)


if __name__ == "__main__":
    # main()
    print(create_parser())
